#pragma once
#include "public.h"



#define CR4_VMX_Model        0x2000 //设置CR4寄存器的第14位为1,开启VMX模式.

typedef struct  
{
    PVOID VmxOnRegion;                 //VMON申请的虚拟地址
    PHYSICAL_ADDRESS  VmOnxRegionPA; //VMX的物理地址
    PVOID pVmxVmcsRegion;            //VMCS申请的虚拟地址
    PHYSICAL_ADDRESS pVmxVmcsRegionPA;//物理地址
    PVOID pHostStack;                //Host的堆栈
    PVOID pGuestStack;               //Guest的堆栈.
   
}G_CPU,*PG_CPU; //记录全局变量的信息

typedef union 
{
    struct 
    {
        ULONG CF : 1;
        ULONG Reserve1 : 1;
        ULONG PF : 1;
        ULONG Reserve2 : 1;
        ULONG AF : 1;
        ULONG Reserve3 : 1;
        ULONG ZF : 1;
        ULONG SF : 1;
        ULONG TF : 1;
        ULONG LF : 1;
        ULONG DF : 1;
        ULONG OF : 1;
        ULONG IOPL : 2;
        ULONG NT : 1;
        ULONG Reserve4 : 1;
        ULONG RF : 1;
        ULONG VM : 1;
        ULONG AC : 1;
        ULONG VIF : 1;
        ULONG VIP : 1;
        ULONG ID : 1;
        ULONG Reserve5 : 10;
    };
   
   
}EFLAGS,*PEFLAGS;

//CRO的结构定义
typedef union 
{
    struct 
    {
        ULONG PE : 1;
        ULONG MP : 1;
        ULONG EM : 1;
        ULONG TS : 1;
        ULONG ET : 1;
        ULONG NE : 1;
        ULONG Reserve1 : 10;
        ULONG WP : 1;
        ULONG Reserve2 : 1;
        ULONG AM : 1;
        ULONG Reserve3 : 10;
        ULONG NW : 1;
        ULONG CD : 1;
        ULONG PG : 1;
    };
}CR0_FLAGS,*PCRO_FLAGS;

typedef union
{
    struct 
    {
        ULONG Reserve : 32;
    };
}CR1_FLAGS,*PCR1_FLAGS;

typedef union
{
    struct
    {
        ULONG Reserve : 32;
    };
}CR2_FLAGS, *PCR2_FLAGS;


typedef union
{
    struct
    {
        ULONG Reserve1 : 2;
        ULONG PWT : 1;
        ULONG PCD : 1;
        ULONG Reserve2 : 7;
        ULONG PageDirBase : 20;
    };
}CR3_FLAGS, *PCR3_FLAGS;

//CR4寄存器代表的意思
typedef union
{
    struct
    {
        ULONG VME : 1;
        ULONG PVI : 1;
        ULONG TSD : 1;
        ULONG DE : 1;
        ULONG PSE : 1;
        ULONG PAE : 1;
        ULONG MCE : 1;
        ULONG PGE : 1;
        ULONG PCE : 1;
        ULONG OSFXSR : 1;
        ULONG OSXMMEXCPT : 1;
        ULONG Reserve1 : 2;
        ULONG VMXE : 1;
        ULONG SMXE : 1;
        ULONG PCIDE : 1;
        ULONG OSXSAVE : 1;
        ULONG Reserve2 : 1;
        ULONG SMEP : 1;
        ULONG Reserve3 : 12;
    };
}CR4_FLAGS, *PCR4_FLAGS;

//MSR 寄存器 结构
enum MSRREGION
{
    IA32_FEATURE_CONTROL = 0x3A,      //检查 Bios 是否支持VT的寄存器.
    MSR_IA32_VMX_BASIC = 0X480,
    IA32_VMX_PINBASED_CTLS = 0x481,    //MSR 481寄存器.表示什么VMCS哪些字段可以设置为0.那些可以设置为1
    IA32_VMX_PROCBASED_CTLS = 0x482,  //Processor-Based VM-Execution Controls
    IA32_VMX_EXIT_CTLS = 0x483,
    IA32_VMX_ENTRY_CTLS = 0x484,      //VM Entry寄存器结构.
    MSR_IA32_VMX_PROCBASED_CTLS2 = 0X48B,
    IA32_VMX_EPT_VPID_CAP = 0X48C,
    MSR_IA32_SYSENTER_CS = 0X174,
    MSR_IA32_SYSENTER_ESP = 0X175,
    MSR_IA32_SYSENTER_EIP = 0X176,
    MSR_IA32_DEBUGCTL = 0x1d9

};
//VMCS 需要用到的结构
enum
{
    VIRTUAL_PROCESSOR_ID = 0x00000000,
    GUEST_ES_SELECTOR = 0x00000800,
    GUEST_CS_SELECTOR = 0x00000802,
    GUEST_SS_SELECTOR = 0x00000804,
    GUEST_DS_SELECTOR = 0x00000806,
    GUEST_FS_SELECTOR = 0x00000808,
    GUEST_GS_SELECTOR = 0x0000080a,
    GUEST_LDTR_SELECTOR = 0x0000080c,
    GUEST_TR_SELECTOR = 0x0000080e,
    HOST_ES_SELECTOR = 0x00000c00,
    HOST_CS_SELECTOR = 0x00000c02,
    HOST_SS_SELECTOR = 0x00000c04,
    HOST_DS_SELECTOR = 0x00000c06,
    HOST_FS_SELECTOR = 0x00000c08,
    HOST_GS_SELECTOR = 0x00000c0a,
    HOST_TR_SELECTOR = 0x00000c0c,
    IO_BITMAP_A = 0x00002000,
    IO_BITMAP_A_HIGH = 0x00002001,
    IO_BITMAP_B = 0x00002002,
    IO_BITMAP_B_HIGH = 0x00002003,
    MSR_BITMAP = 0x00002004,
    MSR_BITMAP_HIGH = 0x00002005,
    VM_EXIT_MSR_STORE_ADDR = 0x00002006,
    VM_EXIT_MSR_STORE_ADDR_HIGH = 0x00002007,
    VM_EXIT_MSR_LOAD_ADDR = 0x00002008,
    VM_EXIT_MSR_LOAD_ADDR_HIGH = 0x00002009,
    VM_ENTRY_MSR_LOAD_ADDR = 0x0000200a,
    VM_ENTRY_MSR_LOAD_ADDR_HIGH = 0x0000200b,
    TSC_OFFSET = 0x00002010,
    TSC_OFFSET_HIGH = 0x00002011,
    VIRTUAL_APIC_PAGE_ADDR = 0x00002012,
    VIRTUAL_APIC_PAGE_ADDR_HIGH = 0x00002013,
    APIC_ACCESS_ADDR = 0x00002014,
    APIC_ACCESS_ADDR_HIGH = 0x00002015,
    EPT_POINTER = 0x0000201a,
    EPT_POINTER_HIGH = 0x0000201b,
    GUEST_PHYSICAL_ADDRESS = 0x00002400,
    GUEST_PHYSICAL_ADDRESS_HIGH = 0x00002401,
    VMCS_LINK_POINTER = 0x00002800,
    VMCS_LINK_POINTER_HIGH = 0x00002801,
    GUEST_IA32_DEBUGCTL = 0x00002802,
    GUEST_IA32_DEBUGCTL_HIGH = 0x00002803,
    PIN_BASED_VM_EXEC_CONTROL = 0x00004000,
    CPU_BASED_VM_EXEC_CONTROL = 0x00004002,
    EXCEPTION_BITMAP = 0x00004004,
    PAGE_FAULT_ERROR_CODE_MASK = 0x00004006,
    PAGE_FAULT_ERROR_CODE_MATCH = 0x00004008,
    CR3_TARGET_COUNT = 0x0000400a,
    VM_EXIT_CONTROLS = 0x0000400c,
    VM_EXIT_MSR_STORE_COUNT = 0x0000400e,
    VM_EXIT_MSR_LOAD_COUNT = 0x00004010,
    VM_ENTRY_CONTROLS = 0x00004012,
    VM_ENTRY_MSR_LOAD_COUNT = 0x00004014,
    VM_ENTRY_INTR_INFO_FIELD = 0x00004016,
    VM_ENTRY_EXCEPTION_ERROR_CODE = 0x00004018,
    VM_ENTRY_INSTRUCTION_LEN = 0x0000401a,
    TPR_THRESHOLD = 0x0000401c,
    SECONDARY_VM_EXEC_CONTROL = 0x0000401e,
    VM_INSTRUCTION_ERROR = 0x00004400,
    VM_EXIT_REASON = 0x00004402,
    VM_EXIT_INTR_INFO = 0x00004404,
    VM_EXIT_INTR_ERROR_CODE = 0x00004406,
    IDT_VECTORING_INFO_FIELD = 0x00004408,
    IDT_VECTORING_ERROR_CODE = 0x0000440a,
    VM_EXIT_INSTRUCTION_LEN = 0x0000440c,
    VMX_INSTRUCTION_INFO = 0x0000440e,

    GUEST_ES_LIMIT = 0x00004800,
    GUEST_CS_LIMIT = 0x00004802,
    GUEST_SS_LIMIT = 0x00004804,
    GUEST_DS_LIMIT = 0x00004806,
    GUEST_FS_LIMIT = 0x00004808,
    GUEST_GS_LIMIT = 0x0000480a,
    GUEST_LDTR_LIMIT = 0x0000480c,
    GUEST_TR_LIMIT = 0x0000480e,
    GUEST_GDTR_LIMIT = 0x00004810,
    GUEST_IDTR_LIMIT = 0x00004812,
    GUEST_ES_AR_BYTES = 0x00004814,
    GUEST_CS_AR_BYTES = 0x00004816,
    GUEST_SS_AR_BYTES = 0x00004818,
    GUEST_DS_AR_BYTES = 0x0000481a,
    GUEST_FS_AR_BYTES = 0x0000481c,
    GUEST_GS_AR_BYTES = 0x0000481e,
    GUEST_LDTR_AR_BYTES = 0x00004820,
    GUEST_TR_AR_BYTES = 0x00004822,
    GUEST_INTERRUPTIBILITY_INFO = 0x00004824,
    GUEST_ACTIVITY_STATE = 0x00004826,
    GUEST_SM_BASE = 0x00004828,
    GUEST_SYSENTER_CS = 0x0000482A,

    HOST_IA32_SYSENTER_CS = 0x00004c00,
    CR0_GUEST_HOST_MASK = 0x00006000,
    CR4_GUEST_HOST_MASK = 0x00006002,
    CR0_READ_SHADOW = 0x00006004,
    CR4_READ_SHADOW = 0x00006006,
    CR3_TARGET_VALUE0 = 0x00006008,
    CR3_TARGET_VALUE1 = 0x0000600a,
    CR3_TARGET_VALUE2 = 0x0000600c,
    CR3_TARGET_VALUE3 = 0x0000600e,
    EXIT_QUALIFICATION = 0x00006400,
    GUEST_LINEAR_ADDRESS = 0x0000640a,
    GUEST_CR0 = 0x00006800,
    GUEST_CR3 = 0x00006802,
    GUEST_CR4 = 0x00006804,
    GUEST_ES_BASE = 0x00006806,
    GUEST_CS_BASE = 0x00006808,
    GUEST_SS_BASE = 0x0000680a,
    GUEST_DS_BASE = 0x0000680c,
    GUEST_FS_BASE = 0x0000680e,
    GUEST_GS_BASE = 0x00006810,
    GUEST_LDTR_BASE = 0x00006812,
    GUEST_TR_BASE = 0x00006814,
    GUEST_GDTR_BASE = 0x00006816,
    GUEST_IDTR_BASE = 0x00006818,
    GUEST_DR7 = 0x0000681a,
    GUEST_ESP = 0x0000681c,
    GUEST_EIP = 0x0000681e,
    GUEST_RFLAGS = 0x00006820,
    GUEST_PENDING_DBG_EXCEPTIONS = 0x00006822,
    GUEST_SYSENTER_ESP = 0x00006824,
    GUEST_SYSENTER_EIP = 0x00006826,
    HOST_CR0 = 0x00006c00,
    HOST_CR3 = 0x00006c02,
    HOST_CR4 = 0x00006c04,
    HOST_FS_BASE = 0x00006c06,
    HOST_GS_BASE = 0x00006c08,
    HOST_TR_BASE = 0x00006c0a,
    HOST_GDTR_BASE = 0x00006c0c,
    HOST_IDTR_BASE = 0x00006c0e,
    HOST_IA32_SYSENTER_ESP = 0x00006c10,
    HOST_IA32_SYSENTER_EIP = 0x00006c12,
    HOST_ESP = 0x00006c14,
    HOST_EIP = 0x00006c16,
};

//段界限描述符.
typedef struct
{
    unsigned	LimitLo : 16;
    unsigned	BaseLo : 16;
    unsigned	BaseMid : 8;
    unsigned	Type : 4;
    unsigned	System : 1;
    unsigned	DPL : 2;
    unsigned	Present : 1;
    unsigned	LimitHi : 4;
    unsigned	AVL : 1;
    unsigned	L : 1;
    unsigned	DB : 1;
    unsigned	Gran : 1;	// Granularity
    unsigned	BaseHi : 8;
} SEGMENT_DESCRIPTOR, *PSEGMENT_DESCRIPTOR;

typedef struct _VMX_BASIC_MSR
{
    unsigned RevId : 32;
    unsigned szVmxOnRegion : 12;
    unsigned ClearBit : 1;
    unsigned Reserved : 3;
    unsigned PhysicalWidth : 1;
    unsigned DualMonitor : 1;
    unsigned MemoryType : 4;
    unsigned VmExitInformation : 1;
    unsigned Reserved2 : 9;
} VMX_BASIC_MSR, *PVMX_BASIC_MSR;
